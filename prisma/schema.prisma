// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  bio           String?
  location      String?
  website       String?
  isPublic      Boolean   @default(false)
  githubId      String?   @unique
  githubUsername String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  activities    GitHubActivity[]
  summaries     Summary[]
  integrations  Integration[]
  badges        Badge[]
  streaks       Streak[]
  settings      UserSettings?
  notifications Notification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model GitHubActivity {
  id          String   @id @default(cuid())
  userId      String
  type        String   // commit, pr, issue
  repository  String
  title       String?
  description String?
  url         String
  sha         String?  // for commits
  branch      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([type, createdAt])
}

model Summary {
  id          String   @id @default(cuid())
  userId      String
  type        String   // daily, weekly
  content     String
  aiGenerated Boolean  @default(true)
  published   Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type, createdAt])
}

model Integration {
  id           String   @id @default(cuid())
  userId       String
  provider     String   // twitter, linkedin, notion
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
}

model Badge {
  id          String   @id @default(cuid())
  userId      String
  type        String   // streak, milestone, achievement
  name        String
  description String
  icon        String?
  earnedAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, earnedAt])
}

model Streak {
  id        String   @id @default(cuid())
  userId    String
  type      String   // commit, summary
  count     Int      @default(0)
  startDate DateTime @default(now())
  lastDate  DateTime @default(now())
  isActive  Boolean  @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
}

model UserSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  autoPostToTwitter     Boolean  @default(false)
  autoPostToLinkedIn    Boolean  @default(false)
  autoPostToNotion      Boolean  @default(false)
  summaryFrequency      String   @default("daily") // daily, weekly
  trackedRepositories   String[] // array of repo names
  tweetTemplate         String?
  emailDigestEnabled    Boolean  @default(false)
  emailDigestFrequency  String   @default("weekly") // daily, weekly
  aiPromptStyle         String   @default("developer") // developer, tweet, narrative
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // summary_ready, tweet_success, tweet_failed, badge_earned
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead, createdAt])
} 